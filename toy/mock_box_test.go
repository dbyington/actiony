// Code generated by MockGen. DO NOT EDIT.
// Source: box.go

// Package toy is a generated GoMock package.
package toy

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBox is a mock of Box interface
type MockBox struct {
	ctrl     *gomock.Controller
	recorder *MockBoxMockRecorder
}

// MockBoxMockRecorder is the mock recorder for MockBox
type MockBoxMockRecorder struct {
	mock *MockBox
}

// NewMockBox creates a new mock instance
func NewMockBox(ctrl *gomock.Controller) *MockBox {
	mock := &MockBox{ctrl: ctrl}
	mock.recorder = &MockBoxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBox) EXPECT() *MockBoxMockRecorder {
	return m.recorder
}

// Empty mocks base method
func (m *MockBox) Empty() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(error)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockBoxMockRecorder) Empty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockBox)(nil).Empty))
}

// Fill mocks base method
func (m *MockBox) Fill() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fill")
	ret0, _ := ret[0].(error)
	return ret0
}

// Fill indicates an expected call of Fill
func (mr *MockBoxMockRecorder) Fill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fill", reflect.TypeOf((*MockBox)(nil).Fill))
}

// Size mocks base method
func (m *MockBox) Size() (int64, int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	return ret0, ret1, ret2
}

// Size indicates an expected call of Size
func (mr *MockBoxMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBox)(nil).Size))
}
